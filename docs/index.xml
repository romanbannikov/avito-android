<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on Avito Android</title><link>https://avito-tech.github.io/avito-android/docs/</link><description>Recent content in Docs on Avito Android</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://avito-tech.github.io/avito-android/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Analytics</title><link>https://avito-tech.github.io/avito-android/docs/analytics/analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/analytics/analytics/</guid><description>Analytics Для сбора данных используем собственные транспорты:
Clickstream (internal) Statsd Поверх транспорта есть готовые обертки под конкретные задачи:
Performance аналитика</description></item><item><title>Android Lint</title><link>https://avito-tech.github.io/avito-android/docs/checks/androidlint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/checks/androidlint/</guid><description>Android Lint https://developer.android.com/studio/write/lint
В PR результаты отображаются во вкладках &amp;ldquo;&amp;lt;app name&amp;gt; lint&amp;rdquo;.
Настройки Помимо стандартных настроек lint у нас есть:
Проставляем общие lintOptions для всех модулей в рутовом build.gradle Рутовый lint.xml для задания исключений для всех модулей в репозитории Плагин для общего lint отчета по всем модулям: com.avito.android.lint-report Как подавить ошибку? Используем стандартные возможности lint (Configure lint to suppress warnings):
Проставить аннотацию @Suppress в коде, если это единичное ложное срабатывание Добавить исключение в lint.</description></item><item><title>Android Studio templates</title><link>https://avito-tech.github.io/avito-android/docs/ide/templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ide/templates/</guid><description>Android Studio templates Запустите install_templates.sh или скопируйте папку вручную из ./templates в $ANDROID_STUDIO_DIR/plugins/android/lib/templates/other</description></item><item><title>Artifacts</title><link>https://avito-tech.github.io/avito-android/docs/cd/artifacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/cd/artifacts/</guid><description>Артефакты сборки (internal) Где храним артефакты? Используем несколько хранилищ:
Artifactory feature-toggles.json api.json staging apk QApps Play market/Play console релизный aab релизный proguard mapping Teamcity Android PR checks Вкладка Artifacts у билда Все файлы pull request Живет ~ 1 месяц Teamcity Android Release Вкладка Artifacts у билда Все файлы релизной сборки Живет ~ 1 месяц</description></item><item><title>Build Types</title><link>https://avito-tech.github.io/avito-android/docs/assemble/buildtypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/buildtypes/</guid><description>Типы сборок Различаются по предназначению:
debug - существует для максимально быстрой сборки, чтобы получить максимально быстрый фидбек на изменения в коде staging - для ручного тестирования, сборка проходит медленнее за счет минимизации, но без нее не получится отловить определенный тип багов stagingAutoTest - для авто тестирования, позволяет в тестах дополнительно проверять результат работы r8, а также подключает release source set release - для заливки в магазин Релизная подпись Минимизация Обфускация Avito Settings Charles proxy SourceSet debug нет нет нет да да debug staging нет да нет да да debug stagingAutoTest нет да нет нет ?</description></item><item><title>BuildMetrics</title><link>https://avito-tech.github.io/avito-android/docs/assemble/buildmetrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/buildmetrics/</guid><description>Метрики сборки Собираем с каждой сборки:
Время сборки Время конфигурации проекта Эффективность кеширования Собираем каждую метрику со следующими атрибутами:
Успешная\упавшая сборка Окружение: локальная сборка или CI Пользователь (для локальных сборок) Имя хоста (для сборок в CI) Часть метрик доступна с большей детализацией:
Аргументы запуска - какую задачу запускали Модуль Dashboards (internal) Время сборки Общее время сборки Время сборки в разрезе пользователей и задач Бенчмарки Нестандартные настройки проекта Статистика по задачам Время конфигурации Эффективность кеширования Общая статистика по сборкам Реализация Собираем плагином com.</description></item><item><title>buildSrc in Gradle</title><link>https://avito-tech.github.io/avito-android/docs/tech_radar/buildsrc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/tech_radar/buildsrc/</guid><description>buildSrc in Gradle Quadrant: tools
Status (ring): hold
It&amp;rsquo;s a default and convenient way for organizing custom plugins and tasks: Gradle - build sources.
Pros No binary versions and releases. It works as implicitly included build.
Cons Slows project synchronization in IDE At Avito, we had 6% of Kotlin code in buildSrc but it cost us about 40% of the time even with all possible optimizations.
Lack of support in IDEA Workaround: work with buildSrc as a standalone project.</description></item><item><title>CI Gradle Plugin</title><link>https://avito-tech.github.io/avito-android/docs/ci/cigradleplugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ci/cigradleplugin/</guid><description>CI Gradle plugin Для настройки CI под конкретный Gradle модуль используется in-house плагин.
Решает задачу точечной настройки типа и строгости проверок для разных сценариев.
plugins { id(&amp;#34;com.avito.android.cd&amp;#34;) } builds { ... } Применяется например в модуле приложения, однако нет никаких ограничений, чтобы применить плагин как-то иначе (см. ./build.gradle)
Builds Используется набор захардкоженых сценариев(builds):
builds { fastCheck { ... } } localCheck - проверки компиляции на локальной машине fastCheck - максимально быстрые проверки, выполняющие требования к CI fullCheck - максимально полные проверки, можем жертвовать скоростью release - набор действий необходимых для предоставления всех релизных артефактов Steps Внутри сценариев описываем декларативно необходимые шаги:</description></item><item><title>CI Values</title><link>https://avito-tech.github.io/avito-android/docs/ci/civalues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ci/civalues/</guid><description>Требования к Continuous Integration Польза Проверки помогают не допускать ошибки
Скорость получения фидбека Ожидаем что билд идет не больше 30 минут
Понятность фидбека При падении однозначно понимаем в чем проблема
Нет лишнего шума (бесполезных warning'ов на которые неизвестно как реагировать)
Детерминизм Запуски на том же коммите должны приводить к одинаковым результатам</description></item><item><title>Code review</title><link>https://avito-tech.github.io/avito-android/docs/ci/impactanalysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ci/impactanalysis/</guid><description>Impact analysis Импакт анализ находит измененные файлы и запускает минимально возможный набор проверок. Это всегда баланс между скоростью проверок и их полнотой.
Описание подхода: The Rise of Test Impact Analysis
UI тесты Обзор реализации для автотестов: Android CI Impact analysis.
Импакт анализу нужна помощь в привязке экрана к модулю. Для этого проставляем Screen.rootId.
Ограничения В импакт анализе есть два типа ошибок:
Не запустили, то что было задето. Запустили больше, чем было задето (fallback).</description></item><item><title>Code review</title><link>https://avito-tech.github.io/avito-android/docs/contributing/codereview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/codereview/</guid><description>Code review / Pull request Инспекция кода проводится для всех изменений в репозитории. Она проводится при отправке изменений в любую ветку, кроме feature. Просмотр и одобрение кода доступно всем разработчикам, но на отправку кода в develop, master накладываются ограничения.
Цели инспекции кода Улучшение качества кода и продукта:
Поиск и устранение ошибок и уязвимостей Оценка поддерживаемости, удобства использования Проверка на соответствие принятым стандартам (того, что невозможно или нецелесообразно автоматизировать) Для команды:</description></item><item><title>Code style</title><link>https://avito-tech.github.io/avito-android/docs/contributing/codestyle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/codestyle/</guid><description>Code Style Автоматизация Editor config За настройку code style отвечает editor config. А точнее плагин для IDE.
Нужно убедиться, что плагин установлен и включен (Preferences &amp;gt; Plugins &amp;gt; Installed &amp;gt; search: EditorConfig)
После этого все настройки авто-формата должны применяться по порядку:
EditorConfig настройка на уровне папки EditorConfig настройка на уровне проекта Личная настройка в IDE (если не определены настройки выше) Правила определены в .editorconfig в корне проекта. И переопределены в папках где значения по-умолчанию не устраивают (например ci/docker/android-builder/.</description></item><item><title>Contacts</title><link>https://avito-tech.github.io/avito-android/docs/contacts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contacts/</guid><description>Contacts Public channels Telegram chat (Russian)
Internal channels Slack:
#android-dev - single slack channel for any android related stuff #android-autotesting - all about testing #speed Issues:
We track our issues in MBS project.</description></item><item><title>Custom Gradle Plugins</title><link>https://avito-tech.github.io/avito-android/docs/ci/customgradleplugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ci/customgradleplugins/</guid><description>Custom Gradle plugins Вся логика CI расположена в in-house Gradle плагинах. Для тестирования корневого проекта смотри модуль build-script-test.
How to start Начни с официальных туториалов, они сэкономят время:
Gradle plugin development tutorials
Для нас не актуальна только публикация плагинов. Custom tasks Если что-то не понятно, здесь тебе помогут:
#gradle (internal) gradle-community.slack.com Работа с плагинами в IDE Предпочтительно использовать IntelliJ IDEA Import project Согласись использовать Gradle wrapper Settings &amp;gt; Build, Execution, Deployment &amp;gt; Build Tools &amp;gt; Gradle &amp;gt; Runner Delegate IDE build/run actions to Gradle (check) Run tests using : Gradle Test Runner Теперь можно запускать тесты по иконкам run</description></item><item><title>Dependencies</title><link>https://avito-tech.github.io/avito-android/docs/assemble/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/dependencies/</guid><description>Зависимости Как подключить внешнюю зависимость? Все зависимости объявляем в одном файле - Dependencies.kt.
На них ссылаемся в build.gradle модуля:
dependencies { implementation(Dependencies.supportAnnotations) Как зафорсить версию зависимости? Конфигурация проекта упадет, если в транзитивных зависимостях прилетают разные версии одной и той-же библиотеки:
&amp;gt; Conflict(s) found for the following module(s): - com.google.android.gms:play-services-measurement-api between versions 17.2.1 and 17.0.0 Run with: --scan or :avito:dependencyInsight --configuration debugRuntimeClasspath --dependency com.google.android.gms:play-services-measurement-api to get more insight on how to solve the conflict.</description></item><item><title>Dependency Injection with Dagger</title><link>https://avito-tech.github.io/avito-android/docs/architecture/dagger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/architecture/dagger/</guid><description>Dagger Материалы Обязательно прочесть Документация Тредик на гитхабе с tips &amp;amp; tricks для kotlin Рекомендую к изучению Видео от одного из авторов Dagger Ron Shapiro, о том, как правильно его готовить Немного устаревшая статья про правильное приготовление dagger ⚠️ Нельзя постигнуть даггер, не смотря какой код он генерирует! Как правильно работать с Dagger Поддерживаемость прежде всего. Граф зависимостей делай маскимально простой и понятный Application Component имеет минимальный скоуп - содержит не более необходимого чилсла зависимостей Если зависимость может быть не глобальной, оне должа быть в скоупе экрана, а не приложения Меньше мокай в instrumentation-тестах Provides → Binds Используй Binds вместо Provides по-возможности всегда</description></item><item><title>Documentation</title><link>https://avito-tech.github.io/avito-android/docs/contributing/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/docs/</guid><description>Documentation If the documentation is not good enough, people will not use what you do.
Style guide Write simply and to the point Documentation is intended to solve problems. Thus, it has to be simple and clear.
We can recommend several definitive guides on writing in general:
The Elements of Style - William Strunk Jr. Пиши, сокращай (glvrd.ru - online checker) Extra materials about technical writing:
Jetbrains - Как писать полезные технические тексты Microsoft Writing Style Guide GitLab documentation styleguide What nobody tells you about documentation Use appropriate format for the problem There is no universal documentation.</description></item><item><title>Dynamic config</title><link>https://avito-tech.github.io/avito-android/docs/test/dynamicconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/dynamicconfig/</guid><description>Запуск тестов в CI с кастомными параметрами (internal) В Teamcity есть конфигурация instrumentationDynamic для запуска тестов со специфическим набором требований.
Запускайте и вам будет предложено выбрать:
Ветку для запуска Версии API Фильтр для выбора тестов (package prefix), можно задать пакет [+ имя класса [+ имя тестового метода ]] Количество запусков. Полезно для отладки нестабильных тестов</description></item><item><title>Feature toggle</title><link>https://avito-tech.github.io/avito-android/docs/contributing/featuretoggles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/featuretoggles/</guid><description>Feature toggle Feature toggle (Wikipedia) Feature toggle (Martin Fowler) Feature Toggles (Pete Hodgson) Используется для уменьшения рисков при внедрении новой функциональности. Позволяет:
Не держать изменения в отдельной ветке до окончания тестирования Отключить на этапе стабилизации, во время регрессионного тестирования Cоздание Решение о создании feature toggle принимается на основе различных критериев:
Изолированность изменений, насколько легко их отключить Риск привнести нестабильность Реализация По умолчанию непротестированная логика должна быть отключена Отключать необходимо самым дешевым и надежным способом, с минимальным влиянием на логику Важно не сломать существующую логику, с отключенным feature toggle, т.</description></item><item><title>Git</title><link>https://avito-tech.github.io/avito-android/docs/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/git/</guid><description>Git Слияние веток Для слияния веток используем rebase. Это дает линейную историю и снижает нагрузку на CI. Пара команд может упростить вашу жизнь с rebase: git config rerere.enabled true &amp;ndash; автоматическое разрешение повторяющихся конфликтов при rebase git config pull.rebase true &amp;ndash; rebase при обновлении remote-ветки
Local Git hooks ./git_hooks будут синхронизированы с .git/hooks при первом запуске gradle.
Git LFS Могло быть полезно для хранения некоторых бинарных(или просто объемных) ресурсов в git.</description></item><item><title>How to start</title><link>https://avito-tech.github.io/avito-android/docs/contributing/howtostart/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/contributing/howtostart/</guid><description>How to start Minimal requirements 16Gb RAM Linux/OSX/Windows 1. Установи Java Поддерживаем только Java 8.
2. Установи Intellij IDEA или Android Studio Поддерживаем последнюю стабильную версию, но обычно работает и beta, и canary.
Для обновлений рекомендуется JetBrains Toolbox.
В одном приложении доступны все IDE.
3. Проверь проект Подключи VPN Запусти в корне проекта: ./gradlew help Должно отработать успешно. Если упадет, прочитай текст ошибки и поправь.
3. Настрой IDE Обнови Kotlin плагин до последней версии Preferences &amp;gt; Languages &amp;amp; Frameworks &amp;gt; Kotlin</description></item><item><title>IDE Benchmarking</title><link>https://avito-tech.github.io/avito-android/docs/ide/benchmarking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ide/benchmarking/</guid><description>Бенчмарки IDE Используем Performance testing plugin.
Как попробовать? Установи плагин Запусти Help &amp;gt; Diagnostic &amp;gt; Execute Performance Scrip from File
Выбери готовый сценарий из /benchmarks/ide Как проверить гипотезу и измерить разницу? Используем в ручном режиме:
Прогони бенчмарк несколько раз до внесения изменений в проект Сохрани резульататы. Они отобразятся в диалоге после прогона бенчмарка Внеси изменения в проект Прогони бенчмарк несколько раз, сравни результаты. Что еще? Плагин умеет записывать YourKit snapshot с детальной информацией о всех вызовах методов.</description></item><item><title>IDE Custom configurations</title><link>https://avito-tech.github.io/avito-android/docs/ide/configurations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ide/configurations/</guid><description>Кастомные конфигурации Шарим в проекте кастомные run/debug конфигурации, чтобы все работало &amp;ldquo;из коробки&amp;rdquo;.
Так гарантируем одинаковые корректные настройки, случайно не сломается.
avito: собирает, устанавливает и запускает Авито.
avitoInstall: собирает и устанавливает Авито, но не запускает автоматически приложение.
Нужна из-за бага &amp;ldquo;Default activity not found&amp;rdquo;.
localCheck: проверка всех этапов компиляции с учетом импакт анализа
Как расшарить конфигурацию? Sharing Run/Debug Configurations</description></item><item><title>IDE Speedup</title><link>https://avito-tech.github.io/avito-android/docs/ide/speedup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ide/speedup/</guid><description>Ускорение IDE Чтобы IDE меньше тормозила при работе с проектом, попробуй эти настройки:
Выдай IDE больше памяти По умолчанию IDE выделяет мало, чтобы суметь запуститься на слабой машине.
Help &amp;gt; Edit custom VM Options
-Xmx4g Слишком много не нужно. Чтобы посмотреть реальное потребление памяти:
Appearance &amp;amp; Behavior &amp;gt; Appearance &amp;gt; Show memory indicator
Включи удаленную сборку Mirakle
Оставь только необходимые приложения Подключаем в settings.gradle только часть приложений, чтобы ускорить работу с проектом.</description></item><item><title>Infrastructure project</title><link>https://avito-tech.github.io/avito-android/docs/infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/infrastructure/</guid><description>Avito android infrastructure on github Monorepo of all tooling to continuously test and deliver apps to users
Modules Gradle plugins To use plugins in your project:
build.gradle
buildscript { dependencies { classpath(&amp;#34;com.avito.android:instrumentation-tests:$avitoToolsVersion&amp;#34;) } repositories { jcenter() } } apply(&amp;#34;com.avito.android.instrumentation-tests&amp;#34;) or
build.gradle
plugins { id(&amp;#34;com.avito.android.instrumentation-tests&amp;#34;) } and in settings.gradle
pluginManagement { repositories { jcenter() } resolutionStrategy { eachPlugin { String pluginId = requested.id.id if (pluginId.startsWith(&amp;#34;com.avito.android&amp;#34;)) { def artifact = pluginId.replace(&amp;#34;com.avito.android.&amp;#34;, &amp;#34;&amp;#34;) useModule(&amp;#34;com.</description></item><item><title>Internals</title><link>https://avito-tech.github.io/avito-android/docs/test_framework/internals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test_framework/internals/</guid><description>Internals Custom click It is a click without inter-process communication.
Motivation to write custom click Espresso click uses inter-process communication. It leads to problems:
Flaky clicks on moving views. Because click takes some time to touch after coordinates calculating. &amp;ldquo;misinterpret clicks as long clicks&amp;rdquo; Implementation details Click happens via dispatch touch event on root view.
Known issues Can click through any system elements on the screen. It applies clicks directly on root view of our application.</description></item><item><title>Known Issues</title><link>https://avito-tech.github.io/avito-android/docs/knownissues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/knownissues/</guid><description>Known Issues New Gradle Sync is not supported due to containing Kotlin modules Disable Settings &amp;gt; Experimental &amp;gt; Only sync the active variant
https://stackoverflow.com/questions/54201216/android-studio-3-3-new-gradle-sync-is-not-supported-due-to-containing-kotlin-mo/</description></item><item><title>Manual</title><link>https://avito-tech.github.io/avito-android/docs/test/manual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/manual/</guid><description>Ручное тестирование Обрати внимание на Типы Сборок
Где взять сборку? QApps</description></item><item><title>Minimization</title><link>https://avito-tech.github.io/avito-android/docs/assemble/minimization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/minimization/</guid><description>Минимизация сборки Официальная документация
В проекте используется R8 (задача (internal) на включение &amp;ldquo;full mode&amp;rdquo;)
Параметры для сборки задаются в корневом gradle.properties
В каких типах сборки включена минимизация: Типы сборки
Story &amp;ldquo;Защита от ошибок минификации кода&amp;rdquo; (internal)
Конфигурация Общая конфигурация собирается по частям из нескольких источников. Помимо способов описанных в документации, конкретно в нашем проекте используется:
$ANDROID_HOME/tools/proguard/proguard-android-optimize.txt базовый конфиг &amp;lt;app&amp;gt;/proguard/**/*.pro конфигурации разбитые по папкам-типам-сборки, а затем отдельным файлам зависимостям. Собираются в build.</description></item><item><title>Mirakle</title><link>https://avito-tech.github.io/avito-android/docs/assemble/mirakle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/mirakle/</guid><description>Mirakle Это Gradle плагин, который переносит сборку проекта на более мощную машину в дата центре. Компьютер во время сборки не так нагружен, можно продолжать работать с проектом.
Как работает:
sequenceDiagram 💻-+Builder: Держи проект (rsync) Note right of Builder: Собираю Builder--💻: Получи что уже готово Builder--💻: Закончил Как настроить в первый раз? Установи rsync Посмотри какой host прописан в mirakle.py Проверь доступность удаленной машины по ssh (с VPN):
ssh [&amp;lt;username&amp;gt;@]&amp;lt;mirakle host&amp;gt;</description></item><item><title>Mocking in tests</title><link>https://avito-tech.github.io/avito-android/docs/test_framework/mocking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test_framework/mocking/</guid><description>Mocking in tests Mocks (internal) Mocking network TBD
Mocking analytics There are different options:
MockAnalyticsRule: mocks analytics completely AnalyticsRule: only intercepts events and tries to not interfere with real implementation &amp;lt;test without rule&amp;gt;: real implementation @get:Rule val analytics = AnalyticsRule() analytics.checks.assertEventTracked&amp;lt;ShowSearchEvent&amp;gt;() Mocking location LocationRule serves for mocking location in tests.
@get:Rule val locationRule = LocationRule() locationRule.setLocation(getTestLocation()) KEEP IN MIND that above rule does not mock location for the whole device but rather replace the best known location in BaseGeoProvider.</description></item><item><title>Modules</title><link>https://avito-tech.github.io/avito-android/docs/architecture/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/architecture/modules/</guid><description>TBD: http://links.k.avito.ru/cfxFKKAg (internal)</description></item><item><title>Profiling</title><link>https://avito-tech.github.io/avito-android/docs/assemble/profiling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/profiling/</guid><description>Профилирование сборки Чтобы посмотреть подробную информацию о скорости сборке попробуй разные инструменты, выбери наиболее простой.
Build Speed window (AS 4+) Собери проект View &amp;gt; Tool Windows &amp;gt; Build &amp;gt; Build Speed Gradle build scan https://guides.gradle.org/creating-build-scans/
Запусти сборку с аргументом --scan.
В конце лога будет ссылка на отчет.
Known issues:
Не приходит первое письмо для активации ссылки:
напиши в help@gradle.com, приложи ссылку. This build scan cannot be viewed. A permanent error occurred processing the data.</description></item><item><title>QApps</title><link>https://avito-tech.github.io/avito-android/docs/cd/qapps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/cd/qapps/</guid><description>QApps (internal) QApps Android
Внутреннее хранилище сборок для ручного тестирования.
Заливаем в него apk по расписанию из develop.
См. конфиг uploadToQapps в build.gradle приложений.
Как залить вручную в QApps с ветки? Локально Для каждого приложения есть задача qappsUpload&amp;lt;build variant&amp;gt;.
Она заливает уже собранную apk.
Собери apk ./gradlew :avito:qappsUploadStaging -Pci=true
Чтобы было проще найти сборку, укажи комментарий аргументом -PbuildNumber=&amp;quot;my custom build&amp;quot; Known issues Для релизной сборки не совсем подходит, т.</description></item><item><title>Release</title><link>https://avito-tech.github.io/avito-android/docs/cd/release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/cd/release/</guid><description>Релиз приложения Android (internal) Канал для коммуникации: #regression-android
Dashboard релизов
Политика релизов мобильных приложений
Как сделать фикс Для каждого релиза отводим ветку release/&amp;lt;Номер версии&amp;gt;
Отводим ветку от релизной Делаем ПР с фиксом в релизную ветку Создаем ветку от текущего develop Делаем ПР с черри-пиком того же коммита в develop Кто сейчас релиз менеджер? На dashboard'е конкретного релиза есть поле Release manager</description></item><item><title>Report Viewer</title><link>https://avito-tech.github.io/avito-android/docs/test/reportviewer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/reportviewer/</guid><description>Report Viewer (internal) Используем отчеты в Report Viewer (internal), которые содержат:
Видео с эмулятора Только для упавших тестов Только для API 23+. На меньших версиях технологии не позволяют записывать надежно Скриншоты: до и после каждого шага, во время падения Трейс ошибки: цепочка событий которая привела к ошибке Logcat для упавших тестов HTTP запросы и ответы во время шагов Логи запросов к ресурсам: Resource Manager, AB/test, Integration API, phones Логи действий тестового фреймворка Using report viewer in a local run Report Viewer works in local runs too.</description></item><item><title>Statsd</title><link>https://avito-tech.github.io/avito-android/docs/analytics/statsd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/analytics/statsd/</guid><description>Statsd (Graphite) Realtime-метрики для отслеживания текущего состояния.
Monitoring (internal) - см. презентацию в самом начале.
См. использование StatsdEvent.</description></item><item><title>Technology radar</title><link>https://avito-tech.github.io/avito-android/docs/tech_radar/techradar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/tech_radar/techradar/</guid><description>Technology radar Technology radar is a list of technologies and practices that are described in the same manner:
An overall status and recommendations for usage Limitations Reasons for choosing or declining Original: https://www.thoughtworks.com/radar
The radar Gradle - buildSrc Template
FAQ Detailed FAQ
What questions does tech radar help to solve? What criteria is technology selected or declined by? What should happen to reconsider the choice? I want to use X.</description></item><item><title>Technology radar Template</title><link>https://avito-tech.github.io/avito-android/docs/tech_radar/template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/tech_radar/template/</guid><description>The Name Quadrant: tools|techniques|platforms|languages &amp;amp; frameworks
Status (ring): hold|assess|trial|adopt
The description.
FAQ</description></item><item><title>Test framework</title><link>https://avito-tech.github.io/avito-android/docs/test_framework/testframework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test_framework/testframework/</guid><description>Test framework ViewElement PageObject над View. Составляющие:
InteractionContext - знания про родительский элемент, окружение Actions - действия с элементом Checks - проверки состояния Создание Для создания используем фабричную функцию element:
val submitButton: ViewElement = element(withId(R.id.submit_button)) ViewMatcher будет учитывать родительский PageObject, унаследует его matcher.
Вложенные ViewElement Все PageObject могут быть вложенными, отражать реальную иерархию:
// parent -&amp;gt; container -&amp;gt; button val container: ViewElement = element(withId(R.id.container)) val button: ViewElement = container.</description></item><item><title>Test Management System</title><link>https://avito-tech.github.io/avito-android/docs/test/testmanagementsystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/testmanagementsystem/</guid><description>Test Management System (internal) В Авито используется собственная TMS, которой нет в open-source.
Внутренняя документация
Метаданные @FeatureId(IntArray) - указать принадлежность к глобальному дереву фич приложения @TagId(IntArray) - принадлежность к облаку тегов теста (у каждой команды свое)
&amp;ndash; deprecated &amp;ndash;
@CaseId(Int) - id теста в TMS, не актуально после введения test case in code @Features(vararg String) - строковое представление фич, не используется в синхронизации
Kind Для того чтобы визуализировать тестовую пирамиду, указывается тип см.</description></item><item><title>Test minimized build</title><link>https://avito-tech.github.io/avito-android/docs/test/testminimized/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/testminimized/</guid><description>Testing minimized build About minimization: link
We want to run our ui tests against build as close as possible to production one.
It&amp;rsquo;s quite a challenging task, mostly because of tooling problems
Developers should maintain a list of keep rules of code referenced from test app manually.
We work around these problems by using keeper.
Build type Our build types: link
Android Gradle plugin uses testBuildType property to determine which build type to test.</description></item><item><title>Troubleshooting</title><link>https://avito-tech.github.io/avito-android/docs/assemble/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/troubleshooting/</guid><description>Troubleshooting Что делать в случае непонятной ошибки? Ситуация: падает синхронизация проекта или сборка. По ошибке ничего не понятно.
Чтобы найти причину, проще всего последовательно исключать все возможные.
Исключи влияние локальных изменений: проверь на свежем develop Проверь что включен VPN Исключи mirakle: ./mirakle.py -d Исключи IDE: проверь из консоли Проверь не переопределено ли что-то подозрительное в ~/.gradle/gradle.properties Убедись что конфигурация проекта проходит успешно: ./gradlew help Посмотри детальную ошибку: `./gradlew &amp;ndash;stacktrace Исключи влияние кеширования: .</description></item><item><title>Troubleshooting UI Tests</title><link>https://avito-tech.github.io/avito-android/docs/test/troubleshootingui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/troubleshootingui/</guid><description>Troubleshooting Known issues All known bugs: jira filter (internal)
Camera auto-focus hangs up on 22 API #139438163
There is no workaround. Skip test on this API level.
Error in local run: &amp;ldquo;Test framework quit unexpectedly&amp;rdquo; Usually it indicates a problem in test runner, see logcat for errors.
In some cases test can run without problems. Use a local test report
Как понять почему упал тест? Посмотри в TeamCity, в тесте краткая выжимка о причинах падения и ссылка на отчет в Report Viewer</description></item><item><title>Unit tests</title><link>https://avito-tech.github.io/avito-android/docs/test/unittesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/unittesting/</guid><description>Unit tests How to write good tests (mockito)
Assertions Рекомендуется использовать assertThat() вместо assertEquals() и т.п.
Мотивация Типизация assertEquals(&amp;quot;id&amp;quot;, 1L) - падает только в рантайме assertThat(&amp;quot;id&amp;quot;, 'is'(1L)) - проверка при компиляции
Читаемость assert &amp;ldquo;equals 3 x&amp;rdquo; assert &amp;ldquo;x is 3&amp;rdquo; - естественный порядок
Комбинирование условий either(s).or(not(t)) each(s) И т.п. особенно с кастомными матчерами.
Сообщения об ошибках assertTrue(response.contains(&amp;#34;color&amp;#34;) || response.contains(&amp;#34;colour&amp;#34;)) // java.lang.AssertionError // at org.junit.Assert.fail(Assert.java) // at org.junit.Assert.assertTrue(...) // и т.п., никаких подробностей assertThat(response, anyOf(containsString(&amp;#34;color&amp;#34;),containsString(&amp;#34;colour&amp;#34;))) // java.</description></item><item><title>Work Manager Testing</title><link>https://avito-tech.github.io/avito-android/docs/test/workmanager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/workmanager/</guid><description>Work Manager Testing This document describes how to test WorkManager&amp;rsquo;s Workers.
How to test WorkManager&amp;rsquo;s Workers? The best way to test your Workers is the way described in official documentation. In short, you can test your Workers directly without initializing WorkManager.
WorkManager is disabled for tests Because using real WorkManager while testing involves a lot of problems as it starts to initialize just before AvitoTestApp (using ContentProvider mechanism). Sometimes it leads to a classic race condition: some Worker tries to get its dependencies to build its own Dagger graph but Application isn&amp;rsquo;t ready so test runner ends up with a crash.</description></item><item><title>Бенчмарки сборки</title><link>https://avito-tech.github.io/avito-android/docs/assemble/benchmarks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/assemble/benchmarks/</guid><description>Бенчмарки сборки Для бенчмарков используем Gradle profiler, где можно описать воспрозводимый сценарий:
Редактировать java/kotlin файлы, android ресурсы Переключаться между коммитами Проверить на разных версиях Gradle Почистить кеш, сборку Учесть прогрев перед измерениями How to start Установи вручную или скриптом: benchmarks/profiler.py --install Опиши свой сценарий. Возьми за основу один из готовых из ci/profiler/benchmarks.scenarios и посмотри какие операции необходимы. Меняем код и ресурсы в модуле serp-core и собираем avito:</description></item><item><title>Введение</title><link>https://avito-tech.github.io/avito-android/docs/test/run/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/run/</guid><description>Запуск тестов IDE Обрати внимание на кастомные конфигурации
Robolectric Просто запускаем стрелками Run напротив имени тестового класса или метода.
Важно чтобы в настройках запуск был делегирован Gradle:
Preferences &amp;gt; Build, Execution, Deployment &amp;gt; Build Tools &amp;gt; Gradle
AS 3.6&amp;#43; Build and run using: Gradle Run tests using: Gradle AS 3.5 Delegate IDE build/run actions to Gradle Run tests using: Gradle Test Runner Instrumentation Known issues Не работает запуск конкретного метода в тесте, только всего класса (#127662898) CI Кастомный запуск</description></item><item><title>Реалтайм-аналитика</title><link>https://avito-tech.github.io/avito-android/docs/performance/analytics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/performance/analytics/</guid><description>Замеры перформанса экрана (internal) Что умеем замерять Пользовательские метрики время от тача до начала инициализации экрана (предынициализация) время от тача до окончания отрисовки каждого из потоков данных экрана Этапы работы экрана время инициализации экрана (ScreenInitTracker) время DI экрана (ScreenDiInjectTracker) время загрузки данных по сети и с диска (наследники ContentLoadingTracker) время обработки данных, например конвертации сетевых моделей в презентационные (ViewDataPreparingTracker) - не всегда используется, потому что не везде есть время отрисовки (с момента посылки команды на отрисовку до того как соответсвующий Runnable отработал на main thread) длительность инициализации и DI компонентов (сабмодулей) Отправляем метрики в statsd для realtime-аналитики и clickstream для AB-тестирования и детального анализа.</description></item><item><title>Сборки в контейнерах</title><link>https://avito-tech.github.io/avito-android/docs/ci/containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/ci/containers/</guid><description>Сборки в контейнерах Avito Docker documentation (internal)
Все образы расположены в ci/docker.
Android SDK Базовый образ c build tools. (будет сделан в MBS-7071)
Android builder Образ который умеет собирать приложение в CI.
How to update? Собери образ локально для проверки изменений: cd ci/docker ./publish &amp;lt;папка с dockerfile&amp;gt;` В output будет новый tag образа.
Обнови тег образа в _main.sh в переменной IMAGE_ANDROID_BUILDER
Убедись что образ отрабатывает корректно при локальном использовании.</description></item><item><title>Скриншотные тесты</title><link>https://avito-tech.github.io/avito-android/docs/test/screenshottesting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/test/screenshottesting/</guid><description>Скриншотные тесты Цель Скриншотные тесты позволяют вовремя отследить изменения цветов / стилей и предотвратить нежелательные изменения в UI
Что именно покрывают скриншотные тесты? Сейчас скриншотные тесты распространяются только на компоненты из дизайн системы
Ограничения В данный момент скриншотные тесты заливаются в git без использования git-lfs. Разумеется, если скриншотов в истории git будет слишком много, то вес репозитория будет слишком большой и работа с ним в целом замедлится. По рассчетам еще не скоро это станет проблемой, договорились что стоит поднимать вопрос после планки в 50 mb</description></item><item><title>Соглашения по работе с внешними библиотеками</title><link>https://avito-tech.github.io/avito-android/docs/externallibrarychangeprocess/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://avito-tech.github.io/avito-android/docs/externallibrarychangeprocess/</guid><description>Соглашения по работе с внешними библиотеками Описание устарело.
Нужно пересмотреть и перенести на страницу про работу с зависимостями. Не нужно использовать без необходимости внешние библиотеки - ради абзаца кода нет смысла утяжелять проект
Не стоит использовать библиотеки сомнительного качества:
С низким рейтингом Плохо покрытые тестами Давно не обновляемые Код в которых заведомо низкого качества и т.п. Наличие или отсутствие каких-либо из этих свойств не является определяющим при выборе библиотеки.</description></item></channel></rss>